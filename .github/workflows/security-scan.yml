name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        worktree: [neural-network, data-pipeline, trading-engine, risk-management, backtesting, api-integration, quantum-optimization, monitoring]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Run Safety check
        continue-on-error: true
        run: |
          if [ -f "worktrees/${{ matrix.worktree }}/requirements.txt" ]; then
            safety check \
              --file worktrees/${{ matrix.worktree }}/requirements.txt \
              --json \
              --output safety-${{ matrix.worktree }}.json || true
          fi

      - name: Upload safety report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report-${{ matrix.worktree }}
          path: safety-${{ matrix.worktree }}.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for common secret patterns..."

          # Check for API keys
          if grep -r "api_key\s*=\s*['\"][^'\"]*['\"]" worktrees/*/src/ --exclude-dir=.git; then
            echo "WARNING: Potential hardcoded API keys found"
            exit 1
          fi

          # Check for passwords
          if grep -r "password\s*=\s*['\"][^'\"]*['\"]" worktrees/*/src/ --exclude-dir=.git; then
            echo "WARNING: Potential hardcoded passwords found"
            exit 1
          fi

          # Check for private keys
          if grep -r "BEGIN.*PRIVATE KEY" worktrees/ --exclude-dir=.git; then
            echo "ERROR: Private keys found in repository"
            exit 1
          fi

          echo "No hardcoded secrets detected"

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r worktrees/*/src/ \
            -f json \
            -o bandit-report.json \
            -ll \
            --exclude worktrees/*/src/tests/ || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Check critical issues
        run: |
          if [ -f bandit-report.json ]; then
            HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-report.json)
            if [ "$HIGH_ISSUES" -gt 0 ]; then
              echo "ERROR: $HIGH_ISSUES high-severity security issues found"
              jq '.results | map(select(.issue_severity == "HIGH"))' bandit-report.json
              exit 1
            fi
          fi

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  api-key-check:
    name: API Key Security Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check .env files not committed
        run: |
          if find . -name ".env" -not -path "./.git/*" | grep -q ".env"; then
            echo "ERROR: .env files found in repository"
            find . -name ".env" -not -path "./.git/*"
            exit 1
          fi
          echo "No .env files in repository (good)"

      - name: Check .env.example exists
        run: |
          if [ ! -f "config/api-keys/.env.example" ]; then
            echo "WARNING: config/api-keys/.env.example not found"
            exit 1
          fi
          echo "Found .env.example template"

      - name: Verify .gitignore entries
        run: |
          if ! grep -q "\.env$" .gitignore; then
            echo "ERROR: .env not in .gitignore"
            exit 1
          fi
          if ! grep -q "api-keys/\.env$" .gitignore; then
            echo "WARNING: api-keys/.env not explicitly ignored"
          fi
          echo ".gitignore properly configured"

  docker-security:
    name: Docker Security Best Practices
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: worktrees/*/Dockerfile
          failure-threshold: warning

      - name: Check for root user in Dockerfiles
        run: |
          echo "Checking Dockerfiles don't run as root..."
          for dockerfile in worktrees/*/Dockerfile; do
            if ! grep -q "USER.*[^root]" "$dockerfile"; then
              echo "WARNING: $dockerfile may run as root"
            fi
          done

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-security, sast-scan, api-key-check, docker-security]
    if: always()

    steps:
      - name: Security scan results
        run: |
          echo "Security scanning completed"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Code Security: ${{ needs.code-security.result }}"
          echo "SAST Scan: ${{ needs.sast-scan.result }}"
          echo "API Key Check: ${{ needs.api-key-check.result }}"
          echo "Docker Security: ${{ needs.docker-security.result }}"

      - name: Fail on critical issues
        if: |
          needs.secret-scan.result == 'failure' ||
          needs.api-key-check.result == 'failure'
        run: |
          echo "CRITICAL SECURITY ISSUES DETECTED"
          exit 1
